{"abi":[{"type":"constructor","inputs":[{"name":"_contractOwner","type":"address","internalType":"address"},{"name":"_diamondCutFacet","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"event","name":"DiamondCut","inputs":[{"name":"_diamondCut","type":"tuple[]","indexed":false,"internalType":"struct IDiamondCut.FacetCut[]","components":[{"name":"facetAddress","type":"address","internalType":"address"},{"name":"action","type":"uint8","internalType":"enum IDiamondCut.FacetCutAction"},{"name":"functionSelectors","type":"bytes4[]","internalType":"bytes4[]"}]},{"name":"_init","type":"address","indexed":false,"internalType":"address"},{"name":"_calldata","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"InitializationFunctionReverted","inputs":[{"name":"_initializationContractAddress","type":"address","internalType":"address"},{"name":"_calldata","type":"bytes","internalType":"bytes"}]}],"bytecode":{"object":"0x60806040526040516113bc3803806113bc83398101604081905261002291610f3e565b61002b82610136565b604080516001808252818301909252600091816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816100425750506040805160018082528183019092529192506000919060208083019080368337019050509050631f931c1c60e01b816000815181106100b1576100b1610f71565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b038516815290810160008152602001828152508260008151811061010157610101610f71565b602002602001018190525061012d826000604051806020016040528060008152506101b960201b60201c565b505050506111c5565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132080546001600160a01b031981166001600160a01b03848116918217909355604051600080516020611310833981519152939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60005b835181101561038c5760008482815181106101d9576101d9610f71565b6020026020010151602001519050600060028111156101fa576101fa610f87565b81600281111561020c5761020c610f87565b036102605761025b85838151811061022657610226610f71565b60200260200101516000015186848151811061024457610244610f71565b6020026020010151604001516103d760201b60201c565b610383565b600181600281111561027457610274610f87565b036102c35761025b85838151811061028e5761028e610f71565b6020026020010151600001518684815181106102ac576102ac610f71565b60200260200101516040015161064860201b60201c565b60028160028111156102d7576102d7610f87565b036103265761025b8583815181106102f1576102f1610f71565b60200260200101516000015186848151811061030f5761030f610f71565b6020026020010151604001516108c260201b60201c565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084015b60405180910390fd5b506001016101bc565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516103c093929190610fed565b60405180910390a16103d28282610a0e565b505050565b600081511161042a5760405162461bcd60e51b815260206004820152602b602482015260008051602061139c83398151915260448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161037a565b6000805160206113108339815191526001600160a01b0383166104925760405162461bcd60e51b815260206004820152602c602482015260008051602061135883398151915260448201526b65206164647265737328302960a01b606482015260840161037a565b6001600160a01b0383166000908152600182016020526040812054906001600160601b03821690036104c8576104c88285610ad4565b60005b83518110156106415760008482815181106104e8576104e8610f71565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0316801561058e5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c7265616479206578697374730000000000000000000000606482015260840161037a565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b0319161790558361063081611106565b945050600190920191506104cb9050565b5050505050565b600081511161069b5760405162461bcd60e51b815260206004820152602b602482015260008051602061139c83398151915260448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161037a565b6000805160206113108339815191526001600160a01b0383166107035760405162461bcd60e51b815260206004820152602c602482015260008051602061135883398151915260448201526b65206164647265737328302960a01b606482015260840161037a565b6001600160a01b0383166000908152600182016020526040812054906001600160601b0382169003610739576107398285610ad4565b60005b835181101561064157600084828151811061075957610759610f71565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036108045760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606482015260840161037a565b61080f858284610b3e565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836108b181611106565b9450506001909201915061073c9050565b60008151116109155760405162461bcd60e51b815260206004820152602b602482015260008051602061139c83398151915260448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161037a565b6000805160206113108339815191526001600160a01b038316156109a15760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d757374206265206164647265737328302900000000000000000000606482015260840161037a565b60005b8251811015610a085760008382815181106109c1576109c1610f71565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b03166109fe848284610b3e565b50506001016109a4565b50505050565b6001600160a01b038216610a20575050565b610a428260405180606001604052806028815260200161133060289139610f01565b600080836001600160a01b031683604051610a5d9190611134565b600060405180830381855af49150503d8060008114610a98576040519150601f19603f3d011682016040523d82523d6000602084013e610a9d565b606091505b509150915081610a0857805115610ab75780518082602001fd5b838360405163192105d760e01b815260040161037a929190611150565b610af68160405180606001604052806024815260200161137860249139610f01565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160a01b038216610bba5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606482015260840161037a565b306001600160a01b03831603610c295760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b606482015260840161037a565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b03169291610c789161117c565b9050808214610d6a576001600160a01b03841660009081526001860160205260408120805483908110610cad57610cad610f71565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b925082919085908110610cfe57610cfe610f71565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b03841660009081526001860160205260409020805480610d9357610d93611195565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b03198516825286905260408120819055819003610641576002850154600090610df69060019061117c565b6001600160a01b0386166000908152600180890160205260409091200154909150808214610ea5576000876002018381548110610e3557610e35610f71565b6000918252602090912001546002890180546001600160a01b039092169250829184908110610e6657610e66610f71565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610eb857610eb8611195565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b8181610a085760405162461bcd60e51b815260040161037a91906111ab565b80516001600160a01b0381168114610f3957600080fd5b919050565b60008060408385031215610f5157600080fd5b610f5a83610f22565b9150610f6860208401610f22565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b83811015610fb8578181015183820152602001610fa0565b50506000910152565b60008151808452610fd9816020860160208601610f9d565b601f01601f19169290920160200192915050565b60006060808301606084528087518083526080925060808601915060808160051b8701016020808b0160005b848110156110c057898403607f19018652815180516001600160a01b0316855283810151898601906003811061105f57634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156110ab5783516001600160e01b0319168252928601926001929092019190860190611081565b50978501979550505090820190600101611019565b50506001600160a01b038a169088015286810360408801526110e28189610fc1565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b038281166002600160601b0319810161112a5761112a6110f0565b6001019392505050565b60008251611146818460208701610f9d565b9190910192915050565b6001600160a01b038316815260406020820181905260009061117490830184610fc1565b949350505050565b8181038181111561118f5761118f6110f0565b92915050565b634e487b7160e01b600052603160045260246000fd5b6020815260006111be6020830184610fc1565b9392505050565b61013c806111d46000396000f3fe60806040523661000b57005b600080357fffffffff000000000000000000000000000000000000000000000000000000001681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604090912054819073ffffffffffffffffffffffffffffffffffffffff16806100e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374604482015260640160405180910390fd5b3660008037600080366000845af43d6000803e808015610101573d6000f35b3d6000fdfea2646970667358221220c8f06a99598088a4c2333d5518847ee695167a3349f8ada9c787861f5258f62564736f6c63430008190033c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204164642066616365742063616e277420624c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f64654c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e2066","sourceMap":"513:2009:0:-:0;;;541:671;;;;;;;;;;;;;;;;;;:::i;:::-;629:43;657:14;629:27;:43::i;:::-;792:29;;;819:1;792:29;;;;;;;;;756:33;;792:29;;;;513:2009;;;;;;;;;-1:-1:-1;513:2009:0;;;;;;;;;;;;;;792:29;;;;;;;;;;;;-1:-1:-1;;867:15:0;;;880:1;867:15;;;;;;;;;756:65;;-1:-1:-1;831:33:0;;867:15;;;;;;;;;;;;-1:-1:-1;867:15:0;831:51;;915:31;;;892:17;910:1;892:20;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;892:54:0;;;:20;;;;;;;;;;:54;965:180;;;;;;;;;-1:-1:-1;;;;;965:180:0;;;;;;;-1:-1:-1;965:180:0;;;;1117:17;965:180;;;956:3;960:1;956:6;;;;;;;;:::i;:::-;;;;;;:189;;;;1155:42;1177:3;1190:1;1155:42;;;;;;;;;;;;:21;;;:42;;:::i;:::-;611:601;;541:671;;513:2009;;2236:264:10;2378:16;;;-1:-1:-1;;;;;;2404:28:10;;-1:-1:-1;;;;;2404:28:10;;;;;;;;;2447:46;;-1:-1:-1;;;;;;;;;;;814:45:10;2378:16;;;;;;2447:46;;2300:25;;2447:46;2290:210;;2236:264;:::o;2948:1067::-;3104:18;3099:806;3137:11;:18;3124:10;:31;3099:806;;;3185:33;3221:11;3233:10;3221:23;;;;;;;;:::i;:::-;;;;;;;:30;;;3185:66;;3279:30;3269:40;;;;;;;;:::i;:::-;:6;:40;;;;;;;;:::i;:::-;;3265:630;;3329:93;3342:11;3354:10;3342:23;;;;;;;;:::i;:::-;;;;;;;:36;;;3380:11;3392:10;3380:23;;;;;;;;:::i;:::-;;;;;;;:41;;;3329:12;;;:93;;:::i;:::-;3265:630;;;3457:34;3447:6;:44;;;;;;;;:::i;:::-;;3443:452;;3511:97;3528:11;3540:10;3528:23;;;;;;;;:::i;:::-;;;;;;;:36;;;3566:11;3578:10;3566:23;;;;;;;;:::i;:::-;;;;;;;:41;;;3511:16;;;:97;;:::i;3443:452::-;3643:33;3633:6;:43;;;;;;;;:::i;:::-;;3629:266;;3696:96;3712:11;3724:10;3712:23;;;;;;;;:::i;:::-;;;;;;;:36;;;3750:11;3762:10;3750:23;;;;;;;;:::i;:::-;;;;;;;:41;;;3696:15;;;:96;;:::i;3629:266::-;3831:49;;-1:-1:-1;;;3831:49:10;;1092:2:12;3831:49:10;;;1074:21:12;1131:2;1111:18;;;1104:30;1170:34;1150:18;;;1143:62;-1:-1:-1;;;1221:18:12;;;1214:37;1268:19;;3831:49:10;;;;;;;;3629:266;-1:-1:-1;3157:12:10;;3099:806;;;;3919:41;3930:11;3943:5;3950:9;3919:41;;;;;;;;:::i;:::-;;;;;;;;3970:38;3991:5;3998:9;3970:20;:38::i;:::-;2948:1067;;;:::o;4021:1089::-;4157:1;4129:18;:25;:29;4121:85;;;;-1:-1:-1;;;4121:85:10;;4234:2:12;4121:85:10;;;4216:21:12;4273:2;4253:18;;;4246:30;-1:-1:-1;;;;;;;;;;;4292:18:12;;;4285:62;-1:-1:-1;;;4363:18:12;;;4356:41;4414:19;;4121:85:10;4032:407:12;4121:85:10;-1:-1:-1;;;;;;;;;;;;;;;;4286:27:10;;4278:84;;;;-1:-1:-1;;;4278:84:10;;4646:2:12;4278:84:10;;;4628:21:12;4685:2;4665:18;;;4658:30;-1:-1:-1;;;;;;;;;;;4704:18:12;;;4697:62;-1:-1:-1;;;4775:18:12;;;4768:42;4827:19;;4278:84:10;4444:408:12;4278:84:10;-1:-1:-1;;;;;4405:40:10;;4372:23;4405:40;;;:25;;;:40;;;;;:65;;-1:-1:-1;;;;;4539:21:10;;;;4535:91;;4576:27;4585:2;4589:13;4576:8;:27::i;:::-;4640:21;4635:469;4679:18;:25;4663:13;:41;4635:469;;;4737:15;4755:18;4774:13;4755:33;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;;4828:39:10;;4802:23;4828:39;;;;;;;;;;;:52;4755:33;;-1:-1:-1;;;;;;4828:52:10;4902:29;;4894:95;;;;-1:-1:-1;;;4894:95:10;;5059:2:12;4894:95:10;;;5041:21:12;5098:2;5078:18;;;5071:30;5137:34;5117:18;;;5110:62;5208:23;5188:18;;;5181:51;5249:19;;4894:95:10;4857:417:12;4894:95:10;-1:-1:-1;;;;;;7469:40:10;;:29;:40;;;;;;;;;;;:85;;-1:-1:-1;;;;;7469:85:10;;;-1:-1:-1;;;;;;;;7469:85:10;;;;;;7564:40;;;;;-1:-1:-1;7564:25:10;;;:40;;;;;:74;;;;;;;;;;;;;;;;;;;;;;;;;7469:85;7564:74;;;;;;;;;;;;;;;;;;;;;7648:40;;;;;;;:69;;-1:-1:-1;;;;;;7648:69:10;;;;5075:18;;;;:::i;:::-;;-1:-1:-1;;4706:15:10;;;;;-1:-1:-1;4635:469:10;;-1:-1:-1;4635:469:10;;;4111:999;;4021:1089;;:::o;5116:1138::-;5256:1;5228:18;:25;:29;5220:85;;;;-1:-1:-1;;;5220:85:10;;4234:2:12;5220:85:10;;;4216:21:12;4273:2;4253:18;;;4246:30;-1:-1:-1;;;;;;;;;;;4292:18:12;;;4285:62;-1:-1:-1;;;4363:18:12;;;4356:41;4414:19;;5220:85:10;4032:407:12;5220:85:10;-1:-1:-1;;;;;;;;;;;;;;;;5377:27:10;;5369:84;;;;-1:-1:-1;;;5369:84:10;;4646:2:12;5369:84:10;;;4628:21:12;4685:2;4665:18;;;4658:30;-1:-1:-1;;;;;;;;;;;4704:18:12;;;4697:62;-1:-1:-1;;;4775:18:12;;;4768:42;4827:19;;5369:84:10;4444:408:12;5369:84:10;-1:-1:-1;;;;;5496:40:10;;5463:23;5496:40;;;:25;;;:40;;;;;:65;;-1:-1:-1;;;;;5630:21:10;;;;5626:79;;5667:27;5676:2;5680:13;5667:8;:27::i;:::-;5719:21;5714:534;5758:18;:25;5742:13;:41;5714:534;;;5816:15;5834:18;5853:13;5834:33;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;;5907:39:10;;5881:23;5907:39;;;;;;;;;;;:52;5834:33;;-1:-1:-1;;;;;;5907:52:10;;;;5981:32;;;;5973:101;;;;-1:-1:-1;;;5973:101:10;;5827:2:12;5973:101:10;;;5809:21:12;5866:2;5846:18;;;5839:30;5905:34;5885:18;;;5878:62;5976:26;5956:18;;;5949:54;6020:19;;5973:101:10;5625:420:12;5973:101:10;6088:45;6103:2;6107:15;6124:8;6088:14;:45::i;:::-;-1:-1:-1;;;;;;7469:40:10;;:29;:40;;;;;;;;;;;:85;;-1:-1:-1;;;;;7469:85:10;;;-1:-1:-1;;;;;;;;7469:85:10;;;;;;7564:40;;;;;-1:-1:-1;7564:25:10;;;:40;;;;;:74;;;;;;;;;;;;;;;;;;;;;;;;;7469:85;7564:74;;;;;;;;;;;;;;;;;;;;;7648:40;;;;;;;:69;;-1:-1:-1;;;;;;7648:69:10;;;;6219:18;;;;:::i;:::-;;-1:-1:-1;;5785:15:10;;;;;-1:-1:-1;5714:534:10;;-1:-1:-1;5714:534:10;6260:742;6399:1;6371:18;:25;:29;6363:85;;;;-1:-1:-1;;;6363:85:10;;4234:2:12;6363:85:10;;;4216:21:12;4273:2;4253:18;;;4246:30;-1:-1:-1;;;;;;;;;;;4292:18:12;;;4285:62;-1:-1:-1;;;4363:18:12;;;4356:41;4414:19;;6363:85:10;4032:407:12;6363:85:10;-1:-1:-1;;;;;;;;;;;;;;;;6585:27:10;;;6577:94;;;;-1:-1:-1;;;6577:94:10;;6252:2:12;6577:94:10;;;6234:21:12;6291:2;6271:18;;;6264:30;6330:34;6310:18;;;6303:62;6401:24;6381:18;;;6374:52;6443:19;;6577:94:10;6050:418:12;6577:94:10;6686:21;6681:315;6725:18;:25;6709:13;:41;6681:315;;;6783:15;6801:18;6820:13;6801:33;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;;6874:39:10;;6848:23;6874:39;;;;;;;;;;;:52;6801:33;;-1:-1:-1;;;;;;6874:52:10;6940:45;6874:2;:52;6801:33;6940:14;:45::i;:::-;-1:-1:-1;;6752:15:10;;6681:315;;;;6353:649;6260:742;;:::o;9926:::-;-1:-1:-1;;;;;10018:19:10;;10014:56;;9926:742;;:::o;10014:56::-;10079:73;10102:5;10079:73;;;;;;;;;;;;;;;;;:22;:73::i;:::-;10171:12;10185:18;10207:5;-1:-1:-1;;;;;10207:18:10;10226:9;10207:29;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10170:66;;;;10251:7;10246:416;;10278:12;;:16;10274:378;;10460:5;10454:12;10510:15;10502:5;10498:2;10494:14;10487:39;10274:378;10620:5;10627:9;10589:48;;-1:-1:-1;;;10589:48:10;;;;;;;;;:::i;7008:316::-;7095:77;7118:13;7095:77;;;;;;;;;;;;;;;;;:22;:77::i;:::-;7246:17;;;:24;;-1:-1:-1;;;;;7182:40:10;;;;;;;:25;;;;:40;;;;;;;:61;;:88;;;7280:37;;;;;;;;;;;;;;-1:-1:-1;;;;;;7280:37:10;;;;;;7008:316::o;7730:2190::-;-1:-1:-1;;;;;7857:27:10;;7849:95;;;;-1:-1:-1;;;7849:95:10;;7286:2:12;7849:95:10;;;7268:21:12;7325:2;7305:18;;;7298:30;7364:34;7344:18;;;7337:62;7435:25;7415:18;;;7408:53;7478:19;;7849:95:10;7084:419:12;7849:95:10;8064:4;-1:-1:-1;;;;;8039:30:10;;;8031:89;;;;-1:-1:-1;;;8031:89:10;;7710:2:12;8031:89:10;;;7692:21:12;7749:2;7729:18;;;7722:30;7788:34;7768:18;;;7761:62;-1:-1:-1;;;7839:18:12;;;7832:44;7893:19;;8031:89:10;7508:410:12;8031:89:10;-1:-1:-1;;;;;;8231:40:10;;8204:24;8231:40;;;;;;;;;;;:65;-1:-1:-1;;;;;8337:40:10;;;;8405:1;8337:25;;;:40;;;;;;:65;-1:-1:-1;;;8231:65:10;;;-1:-1:-1;;;;;8231:65:10;;8204:24;8337:69;;;:::i;:::-;8306:100;;8508:20;8488:16;:40;8484:387;;-1:-1:-1;;;;;8566:40:10;;8544:19;8566:40;;;:25;;;:40;;;;;:80;;8625:20;;8566:80;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;8660:40:10;;;;:25;;;:40;;;;;;;:76;;8566:80;;;;;;;;;;;;;;-1:-1:-1;8566:80:10;;8660:40;8719:16;;8660:76;;;;;;:::i;:::-;;;;;;;;;;;;;:91;;;:76;;;;;;:91;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8765:43:10;;;;;;;;;;;;:95;;-1:-1:-1;;;;;8765:95:10;-1:-1:-1;;;;;;;;8765:95:10;;;;;;8484:387;-1:-1:-1;;;;;8916:40:10;;;;;;:25;;;:40;;;;;:64;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;8916:64:10;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8997:40:10;;;;;;;;;;8990:47;;;9132:25;;;9128:786;;9299:17;;;:24;9264:32;;9299:28;;9326:1;;9299:28;:::i;:::-;-1:-1:-1;;;;;9372:40:10;;9341:28;9372:40;;;:25;;;;:40;;;;;;:61;;9264:63;;-1:-1:-1;9451:48:10;;;9447:338;;9519:24;9546:2;:17;;9564:24;9546:43;;;;;;;;:::i;:::-;;;;;;;;;;;9607:17;;;:39;;-1:-1:-1;;;;;9546:43:10;;;;-1:-1:-1;9546:43:10;;9625:20;;9607:39;;;;;;:::i;:::-;;;;;;;;;;;;;:58;;-1:-1:-1;;;;;;9607:58:10;-1:-1:-1;;;;;9607:58:10;;;;;;9683:43;;;;;;-1:-1:-1;9683:25:10;;;:43;;;;;;:64;:87;;;9447:338;9798:2;:17;;:23;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;9798:23:10;;;;;-1:-1:-1;;;;;;9798:23:10;;;;;;;;;-1:-1:-1;;;;;9842:40:10;;;;9798:23;9842:25;;;:40;;;;;;:61;9835:68;-1:-1:-1;;7831:2089:10;;7730:2190;;;:::o;10674:261::-;10847:22;;10914:13;10896:16;10888:40;;;;-1:-1:-1;;;10888:40:10;;;;;;;;:::i;14:177:12:-;93:13;;-1:-1:-1;;;;;135:31:12;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;626:127::-;687:10;682:3;678:20;675:1;668:31;718:4;715:1;708:15;742:4;739:1;732:15;758:127;819:10;814:3;810:20;807:1;800:31;850:4;847:1;840:15;874:4;871:1;864:15;1407:250;1492:1;1502:113;1516:6;1513:1;1510:13;1502:113;;;1592:11;;;1586:18;1573:11;;;1566:39;1538:2;1531:10;1502:113;;;-1:-1:-1;;1649:1:12;1631:16;;1624:27;1407:250::o;1662:270::-;1703:3;1741:5;1735:12;1768:6;1763:3;1756:19;1784:76;1853:6;1846:4;1841:3;1837:14;1830:4;1823:5;1819:16;1784:76;:::i;:::-;1914:2;1893:15;-1:-1:-1;;1889:29:12;1880:39;;;;1921:4;1876:50;;1662:270;-1:-1:-1;;1662:270:12:o;1937:2090::-;2203:4;2232:2;2272;2261:9;2257:18;2302:2;2291:9;2284:21;2325:6;2360;2354:13;2391:6;2383;2376:22;2417:3;2407:13;;2451:3;2440:9;2436:19;2429:26;;2514:3;2504:6;2501:1;2497:14;2486:9;2482:30;2478:40;2537:4;2576:2;2568:6;2564:15;2597:1;2607:1249;2621:6;2618:1;2615:13;2607:1249;;;2686:22;;;-1:-1:-1;;2682:37:12;2670:50;;2743:13;;2830:9;;-1:-1:-1;;;;;2826:35:12;2811:51;;2901:11;;;2895:18;2783:15;;;;2953:1;2936:19;;2926:170;;3006:10;3001:3;2997:20;2994:1;2987:31;3045:4;3042:1;3035:15;3077:4;3074:1;3067:15;2926:170;3116:15;;;3109:37;3169:4;3214:11;;;3208:18;3246:15;;;3239:27;;;3327:21;;3361:24;;;;3451:23;;;;-1:-1:-1;;3407:15:12;;;;3512:236;3528:8;3523:3;3520:17;3512:236;;;3609:15;;-1:-1:-1;;;;;;3605:42:12;3591:57;;3717:17;;;;3556:1;3547:11;;;;;3674:14;;;;3512:236;;;-1:-1:-1;3834:12:12;;;;3771:5;-1:-1:-1;;;3799:15:12;;;;2643:1;2636:9;2607:1249;;;-1:-1:-1;;;;;;;1364:31:12;;3892:18;;;1352:44;3949:22;;;3942:4;3927:20;;3920:52;3989:32;3953:6;4006;3989:32;:::i;:::-;3981:40;1937:2090;-1:-1:-1;;;;;;;;;;1937:2090:12:o;5279:127::-;5340:10;5335:3;5331:20;5328:1;5321:31;5371:4;5368:1;5361:15;5395:4;5392:1;5385:15;5411:209;5449:3;-1:-1:-1;;;;;5519:14:12;;;-1:-1:-1;;;;;;5545:15:12;;5542:41;;5563:18;;:::i;:::-;5612:1;5599:15;;5411:209;-1:-1:-1;;;5411:209:12:o;6473:287::-;6602:3;6640:6;6634:13;6656:66;6715:6;6710:3;6703:4;6695:6;6691:17;6656:66;:::i;:::-;6738:16;;;;;6473:287;-1:-1:-1;;6473:287:12:o;6765:314::-;-1:-1:-1;;;;;6940:32:12;;6922:51;;7009:2;7004;6989:18;;6982:30;;;-1:-1:-1;;7029:44:12;;7054:18;;7046:6;7029:44;:::i;:::-;7021:52;6765:314;-1:-1:-1;;;;6765:314:12:o;7923:128::-;7990:9;;;8011:11;;;8008:37;;;8025:18;;:::i;:::-;7923:128;;;;:::o;8056:127::-;8117:10;8112:3;8108:20;8105:1;8098:31;8148:4;8145:1;8138:15;8172:4;8169:1;8162:15;8188:219;8337:2;8326:9;8319:21;8300:4;8357:44;8397:2;8386:9;8382:18;8374:6;8357:44;:::i;:::-;8349:52;8188:219;-1:-1:-1;;;8188:219:12:o;:::-;513:2009:0;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040523661000b57005b600080357fffffffff000000000000000000000000000000000000000000000000000000001681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604090912054819073ffffffffffffffffffffffffffffffffffffffff16806100e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374604482015260640160405180910390fd5b3660008037600080366000845af43d6000803e808015610101573d6000f35b3d6000fdfea2646970667358221220c8f06a99598088a4c2333d5518847ee695167a3349f8ada9c787861f5258f62564736f6c63430008190033","sourceMap":"513:2009:0:-:0;;;;;;;;1376:36;1668:7;;;;1638:38;;814:45:10;1638:38:0;;;;;;;;:51;814:45:10;;1638:51:0;;;1699:64;;;;;;;216:2:12;1699:64:0;;;198:21:12;;;235:18;;;228:30;294:34;274:18;;;267:62;346:18;;1699:64:0;;;;;;;;1960:14;1957:1;1954;1941:34;2104:1;2101;2085:14;2082:1;2075:5;2068;2055:51;2176:16;2173:1;2170;2155:38;2280:6;2303:74;;;;2434:16;2431:1;2424:27;2303:74;2342:16;2339:1;2332:27","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport { LibDiamond } from \\\"./libraries/LibDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"./interfaces/IDiamondCut.sol\\\";\\n\\ncontract Diamond {    \\n\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {        \\n        LibDiamond.setContractOwner(_contractOwner);\\n\\n        // Add the diamondCut external function from the diamondCutFacet\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet, \\n            action: IDiamondCut.FacetCutAction.Add, \\n            functionSelectors: functionSelectors\\n        });\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");        \\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        // get diamond storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        // get facet from function selector\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x67a461e00a275fc809f4acdca15faed81204d08e11b455df489c7087b5d1f59c\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    // 32 bytes keccak hash of a string to use as a diamond storage location.\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        // assigns struct storage slot to the storage position\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xc5044f5a7a031e4e1869a26addf83b25c8b20d5949ba13b613dfbc72ad2f63b0\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_contractOwner","type":"address"},{"internalType":"address","name":"_diamondCutFacet","type":"address"}],"stateMutability":"payable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_initializationContractAddress","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"type":"error","name":"InitializationFunctionReverted"},{"inputs":[{"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]","components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false},{"internalType":"address","name":"_init","type":"address","indexed":false},{"internalType":"bytes","name":"_calldata","type":"bytes","indexed":false}],"type":"event","name":"DiamondCut","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[],"stateMutability":"payable","type":"fallback"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":1000},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/Diamond.sol":"Diamond"},"evmVersion":"istanbul","libraries":{}},"sources":{"contracts/Diamond.sol":{"keccak256":"0x67a461e00a275fc809f4acdca15faed81204d08e11b455df489c7087b5d1f59c","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n*\n* Implementation of a diamond.\n/******************************************************************************/\n\nimport { LibDiamond } from \"./libraries/LibDiamond.sol\";\nimport { IDiamondCut } from \"./interfaces/IDiamondCut.sol\";\n\ncontract Diamond {    \n\n    constructor(address _contractOwner, address _diamondCutFacet) payable {        \n        LibDiamond.setContractOwner(_contractOwner);\n\n        // Add the diamondCut external function from the diamondCutFacet\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\n        bytes4[] memory functionSelectors = new bytes4[](1);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        cut[0] = IDiamondCut.FacetCut({\n            facetAddress: _diamondCutFacet, \n            action: IDiamondCut.FacetCutAction.Add, \n            functionSelectors: functionSelectors\n        });\n        LibDiamond.diamondCut(cut, address(0), \"\");        \n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        LibDiamond.DiamondStorage storage ds;\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\n        // get diamond storage\n        assembly {\n            ds.slot := position\n        }\n        // get facet from function selector\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        // Execute external function from facet using delegatecall and return any value.\n        assembly {\n            // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // execute function call using the facet\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            // get any return value\n            returndatacopy(0, 0, returndatasize())\n            // return any return value or error back to the caller\n            switch result\n                case 0 {\n                    revert(0, returndatasize())\n                }\n                default {\n                    return(0, returndatasize())\n                }\n        }\n    }\n\n    receive() external payable {}\n}\n","license":"MIT"},"contracts/interfaces/IDiamondCut.sol":{"keccak256":"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n","license":"MIT"},"contracts/libraries/LibDiamond.sol":{"keccak256":"0xc5044f5a7a031e4e1869a26addf83b25c8b20d5949ba13b613dfbc72ad2f63b0","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\n\nlibrary LibDiamond {\n    // 32 bytes keccak hash of a string to use as a diamond storage location.\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        // assigns struct storage slot to the storage position\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            return;\n        }\n        enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");        \n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\n        if (!success) {\n            if (error.length > 0) {\n                // bubble up error\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(error)\n                    revert(add(32, error), returndata_size)\n                }\n            } else {\n                revert InitializationFunctionReverted(_init, _calldata);\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n","license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev"},"id":0}