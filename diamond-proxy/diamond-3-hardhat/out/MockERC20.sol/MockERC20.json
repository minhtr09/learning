{"abi":[{"type":"function","name":"DOMAIN_SEPARATOR","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"name_","type":"string","internalType":"string"},{"name":"symbol_","type":"string","internalType":"string"},{"name":"decimals_","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"nonces","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"permit","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"v","type":"uint8","internalType":"uint8"},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"s","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x6080604052348015600f57600080fd5b50610ebc8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b41146101c5578063a9059cbb146101cd578063d505accf146101e0578063dd62ed3e146101f357600080fd5b80633644e5151461017457806370a082311461017c5780637ecebe00146101a557600080fd5b806318160ddd116100bd57806318160ddd1461013a57806323b872dd1461014c578063313ce5671461015f57600080fd5b806306fdde03146100e4578063095ea7b3146101025780631624f6c614610125575b600080fd5b6100ec61022c565b6040516100f991906109bf565b60405180910390f35b610115610110366004610a2a565b6102be565b60405190151581526020016100f9565b610138610133366004610b08565b61032b565b005b6003545b6040519081526020016100f9565b61011561015a366004610b7c565b6103d4565b60025460405160ff90911681526020016100f9565b61013e6104e9565b61013e61018a366004610bb8565b6001600160a01b031660009081526004602052604090205490565b61013e6101b3366004610bb8565b60086020526000908152604090205481565b6100ec61050f565b6101156101db366004610a2a565b61051e565b6101386101ee366004610bd3565b6105b5565b61013e610201366004610c3d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b60606000805461023b90610c70565b80601f016020809104026020016040519081016040528092919081815260200182805461026790610c70565b80156102b45780601f10610289576101008083540402835291602001916102b4565b820191906000526020600020905b81548152906001019060200180831161029757829003601f168201915b5050505050905090565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103199086815260200190565b60405180910390a35060015b92915050565b60095460ff16156103835760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c495a45440000000000000000000000000060448201526064015b60405180910390fd5b600061038f8482610cfb565b50600161039c8382610cfb565b506002805460ff191660ff83161790556103b461083d565b6006556103bf610856565b60075550506009805460ff1916600117905550565b6001600160a01b038316600090815260056020908152604080832033845290915281205460001981146104305761040b81846108f9565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b03851660009081526004602052604090205461045390846108f9565b6001600160a01b038087166000908152600460205260408082209390935590861681522054610482908461095c565b6001600160a01b0380861660008181526004602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104d69087815260200190565b60405180910390a3506001949350505050565b60006006546104f661083d565b1461050857610503610856565b905090565b5060075490565b60606001805461023b90610c70565b3360009081526004602052604081205461053890836108f9565b33600090815260046020526040808220929092556001600160a01b03851681522054610564908361095c565b6001600160a01b0384166000818152600460205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103199086815260200190565b428410156106055760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161037a565b600060016106116104e9565b6001600160a01b038a16600090815260086020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d9290919061065f83610dd1565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e001604051602081830303815290604052805190602001206040516020016106f39291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610751573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906107875750876001600160a01b0316816001600160a01b0316145b6107d35760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5349474e4552000000000000000000000000000000000000604482015260640161037a565b6001600160a01b0381811660009081526005602090815260408083208b8516808552908352928190208a90555189815291928b16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050565b60006109bb8061084f63ffffffff8216565b9250505090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516108889190610dea565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66108b961083d565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60008183101561094b5760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f7700000000604482015260640161037a565b6109558284610e60565b9392505050565b6000806109698385610e73565b9050838110156109555760405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f770000000000000000604482015260640161037a565b4690565b60006020808352835180602085015260005b818110156109ed578581018301518582016040015282016109d1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a2557600080fd5b919050565b60008060408385031215610a3d57600080fd5b610a4683610a0e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a7b57600080fd5b813567ffffffffffffffff80821115610a9657610a96610a54565b604051601f8301601f19908116603f01168101908282118183101715610abe57610abe610a54565b81604052838152866020858801011115610ad757600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114610a2557600080fd5b600080600060608486031215610b1d57600080fd5b833567ffffffffffffffff80821115610b3557600080fd5b610b4187838801610a6a565b94506020860135915080821115610b5757600080fd5b50610b6486828701610a6a565b925050610b7360408501610af7565b90509250925092565b600080600060608486031215610b9157600080fd5b610b9a84610a0e565b9250610ba860208501610a0e565b9150604084013590509250925092565b600060208284031215610bca57600080fd5b61095582610a0e565b600080600080600080600060e0888a031215610bee57600080fd5b610bf788610a0e565b9650610c0560208901610a0e565b95506040880135945060608801359350610c2160808901610af7565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215610c5057600080fd5b610c5983610a0e565b9150610c6760208401610a0e565b90509250929050565b600181811c90821680610c8457607f821691505b602082108103610ca457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610cf6576000816000526020600020601f850160051c81016020861015610cd35750805b601f850160051c820191505b81811015610cf257828155600101610cdf565b5050505b505050565b815167ffffffffffffffff811115610d1557610d15610a54565b610d2981610d238454610c70565b84610caa565b602080601f831160018114610d5e5760008415610d465750858301515b600019600386901b1c1916600185901b178555610cf2565b600085815260208120601f198616915b82811015610d8d57888601518255948401946001909101908401610d6e565b5085821015610dab5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201610de357610de3610dbb565b5060010190565b6000808354610df881610c70565b60018281168015610e105760018114610e2557610e54565b60ff1984168752821515830287019450610e54565b8760005260208060002060005b85811015610e4b5781548a820152908401908201610e32565b50505082870194505b50929695505050505050565b8181038181111561032557610325610dbb565b8082018082111561032557610325610dbb56fea26469706673582212206d674572c709ff2022b83a29f3227c39de34905dae744e46dc28dfbc7d7c51c164736f6c63430008190033","sourceMap":"369:7950:20:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b41146101c5578063a9059cbb146101cd578063d505accf146101e0578063dd62ed3e146101f357600080fd5b80633644e5151461017457806370a082311461017c5780637ecebe00146101a557600080fd5b806318160ddd116100bd57806318160ddd1461013a57806323b872dd1461014c578063313ce5671461015f57600080fd5b806306fdde03146100e4578063095ea7b3146101025780631624f6c614610125575b600080fd5b6100ec61022c565b6040516100f991906109bf565b60405180910390f35b610115610110366004610a2a565b6102be565b60405190151581526020016100f9565b610138610133366004610b08565b61032b565b005b6003545b6040519081526020016100f9565b61011561015a366004610b7c565b6103d4565b60025460405160ff90911681526020016100f9565b61013e6104e9565b61013e61018a366004610bb8565b6001600160a01b031660009081526004602052604090205490565b61013e6101b3366004610bb8565b60086020526000908152604090205481565b6100ec61050f565b6101156101db366004610a2a565b61051e565b6101386101ee366004610bd3565b6105b5565b61013e610201366004610c3d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b60606000805461023b90610c70565b80601f016020809104026020016040519081016040528092919081815260200182805461026790610c70565b80156102b45780601f10610289576101008083540402835291602001916102b4565b820191906000526020600020905b81548152906001019060200180831161029757829003601f168201915b5050505050905090565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103199086815260200190565b60405180910390a35060015b92915050565b60095460ff16156103835760405162461bcd60e51b815260206004820152601360248201527f414c52454144595f494e495449414c495a45440000000000000000000000000060448201526064015b60405180910390fd5b600061038f8482610cfb565b50600161039c8382610cfb565b506002805460ff191660ff83161790556103b461083d565b6006556103bf610856565b60075550506009805460ff1916600117905550565b6001600160a01b038316600090815260056020908152604080832033845290915281205460001981146104305761040b81846108f9565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b03851660009081526004602052604090205461045390846108f9565b6001600160a01b038087166000908152600460205260408082209390935590861681522054610482908461095c565b6001600160a01b0380861660008181526004602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104d69087815260200190565b60405180910390a3506001949350505050565b60006006546104f661083d565b1461050857610503610856565b905090565b5060075490565b60606001805461023b90610c70565b3360009081526004602052604081205461053890836108f9565b33600090815260046020526040808220929092556001600160a01b03851681522054610564908361095c565b6001600160a01b0384166000818152600460205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103199086815260200190565b428410156106055760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161037a565b600060016106116104e9565b6001600160a01b038a16600090815260086020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d9290919061065f83610dd1565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e001604051602081830303815290604052805190602001206040516020016106f39291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610751573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906107875750876001600160a01b0316816001600160a01b0316145b6107d35760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5349474e4552000000000000000000000000000000000000604482015260640161037a565b6001600160a01b0381811660009081526005602090815260408083208b8516808552908352928190208a90555189815291928b16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050565b60006109bb8061084f63ffffffff8216565b9250505090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516108889190610dea565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66108b961083d565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60008183101561094b5760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f7700000000604482015260640161037a565b6109558284610e60565b9392505050565b6000806109698385610e73565b9050838110156109555760405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f770000000000000000604482015260640161037a565b4690565b60006020808352835180602085015260005b818110156109ed578581018301518582016040015282016109d1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a2557600080fd5b919050565b60008060408385031215610a3d57600080fd5b610a4683610a0e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a7b57600080fd5b813567ffffffffffffffff80821115610a9657610a96610a54565b604051601f8301601f19908116603f01168101908282118183101715610abe57610abe610a54565b81604052838152866020858801011115610ad757600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114610a2557600080fd5b600080600060608486031215610b1d57600080fd5b833567ffffffffffffffff80821115610b3557600080fd5b610b4187838801610a6a565b94506020860135915080821115610b5757600080fd5b50610b6486828701610a6a565b925050610b7360408501610af7565b90509250925092565b600080600060608486031215610b9157600080fd5b610b9a84610a0e565b9250610ba860208501610a0e565b9150604084013590509250925092565b600060208284031215610bca57600080fd5b61095582610a0e565b600080600080600080600060e0888a031215610bee57600080fd5b610bf788610a0e565b9650610c0560208901610a0e565b95506040880135945060608801359350610c2160808901610af7565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215610c5057600080fd5b610c5983610a0e565b9150610c6760208401610a0e565b90509250929050565b600181811c90821680610c8457607f821691505b602082108103610ca457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610cf6576000816000526020600020601f850160051c81016020861015610cd35750805b601f850160051c820191505b81811015610cf257828155600101610cdf565b5050505b505050565b815167ffffffffffffffff811115610d1557610d15610a54565b610d2981610d238454610c70565b84610caa565b602080601f831160018114610d5e5760008415610d465750858301515b600019600386901b1c1916600185901b178555610cf2565b600085815260208120601f198616915b82811015610d8d57888601518255948401946001909101908401610d6e565b5085821015610dab5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201610de357610de3610dbb565b5060010190565b6000808354610df881610c70565b60018281168015610e105760018114610e2557610e54565b60ff1984168752821515830287019450610e54565b8760005260208060002060005b85811015610e4b5781548a820152908401908201610e32565b50505082870194505b50929695505050505050565b8181038181111561032557610325610dbb565b8082018082111561032557610325610dbb56fea26469706673582212206d674572c709ff2022b83a29f3227c39de34905dae744e46dc28dfbc7d7c51c164736f6c63430008190033","sourceMap":"369:7950:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;677:92;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3057:221;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:25;;1185:22;1167:41;;1155:2;1140:18;3057:221:20;1027:187:25;2504:365:20;;;;;;:::i;:::-;;:::i;:::-;;1322:100;1403:12;;1322:100;;;3057:25:25;;;3045:2;3030:18;1322:100:20;2911:177:25;3578:472:20;;;;;;:::i;:::-;;:::i;877:92::-;953:9;;877:92;;953:9;;;;3568:36:25;;3556:2;3541:18;877:92:20;3426:184:25;5427:178:20;;;:::i;1428:116::-;;;;;;:::i;:::-;-1:-1:-1;;;;;1520:17:20;1494:7;1520:17;;;:10;:17;;;;;;;1428:116;1970:41;;;;;;:::i;:::-;;;;;;;;;;;;;;775:96;;;:::i;3284:288::-;;;;;;:::i;:::-;;:::i;4239:1182::-;;;;;;:::i;:::-;;:::i;1550:142::-;;;;;;:::i;:::-;-1:-1:-1;;;;;1659:17:20;;;1633:7;1659:17;;;:10;:17;;;;;;;;:26;;;;;;;;;;;;;1550:142;677:92;725:13;757:5;750:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;677:92;:::o;3057:221::-;3167:10;3140:4;3156:22;;;:10;:22;;;;;;;;-1:-1:-1;;;;;3156:31:20;;;;;;;;;;:40;;;3212:37;3140:4;;3156:31;;3212:37;;;;3190:6;3057:25:25;;3045:2;3030:18;;2911:177;3212:37:20;;;;;;;;-1:-1:-1;3267:4:20;3057:221;;;;;:::o;2504:365::-;2611:11;;;;2610:12;2602:44;;;;-1:-1:-1;;;2602:44:20;;5508:2:25;2602:44:20;;;5490:21:25;5547:2;5527:18;;;5520:30;5586:21;5566:18;;;5559:49;5625:18;;2602:44:20;;;;;;;;;2657:5;:13;2665:5;2657;:13;:::i;:::-;-1:-1:-1;2680:7:20;:17;2690:7;2680;:17;:::i;:::-;-1:-1:-1;2707:9:20;:21;;-1:-1:-1;;2707:21:20;;;;;;;2758:14;:12;:14::i;:::-;2739:16;:33;2809:24;:22;:24::i;:::-;2782;:51;-1:-1:-1;;2844:11:20;:18;;-1:-1:-1;;2844:18:20;2858:4;2844:18;;;-1:-1:-1;2504:365:20:o;3578:472::-;-1:-1:-1;;;;;3709:16:20;;3675:4;3709:16;;;:10;:16;;;;;;;;3726:10;3709:28;;;;;;;;-1:-1:-1;;3788:22:20;;3784:80;;3843:21;3848:7;3857:6;3843:4;:21::i;:::-;-1:-1:-1;;;;;3812:16:20;;;;;;:10;:16;;;;;;;;3829:10;3812:28;;;;;;;:52;3784:80;-1:-1:-1;;;;;3899:16:20;;;;;;:10;:16;;;;;;3894:30;;3917:6;3894:4;:30::i;:::-;-1:-1:-1;;;;;3875:16:20;;;;;;;:10;:16;;;;;;:49;;;;3956:14;;;;;;;3951:28;;3972:6;3951:4;:28::i;:::-;-1:-1:-1;;;;;3934:14:20;;;;;;;:10;:14;;;;;;;:45;;;;3995:26;;;;;;;;;;4014:6;3057:25:25;;3045:2;3030:18;;2911:177;3995:26:20;;;;;;;;-1:-1:-1;4039:4:20;;3578:472;-1:-1:-1;;;;3578:472:20:o;5427:178::-;5484:7;5528:16;;5510:14;:12;:14::i;:::-;:34;:88;;5574:24;:22;:24::i;:::-;5503:95;;5427:178;:::o;5510:88::-;-1:-1:-1;5547:24:20;;;5427:178::o;775:96::-;825:13;857:7;850:14;;;;;:::i;3284:288::-;3420:10;3363:4;3409:22;;;:10;:22;;;;;;3404:36;;3433:6;3404:4;:36::i;:::-;3390:10;3379:22;;;;:10;:22;;;;;;:61;;;;-1:-1:-1;;;;;3472:14:20;;;;;;3467:28;;3488:6;3467:4;:28::i;:::-;-1:-1:-1;;;;;3450:14:20;;;;;;:10;:14;;;;;;;:45;;;;3511:32;;3520:10;;3511:32;;;;3536:6;3057:25:25;;3045:2;3030:18;;2911:177;4239:1182:20;4416:15;4404:8;:27;;4396:63;;;;-1:-1:-1;;;4396:63:20;;8051:2:25;4396:63:20;;;8033:21:25;8090:2;8070:18;;;8063:30;8129:25;8109:18;;;8102:53;8172:18;;4396:63:20;7849:347:25;4396:63:20;4470:24;4497:717;4617:18;:16;:18::i;:::-;-1:-1:-1;;;;;5026:13:20;;;;;;:6;:13;;;;;:15;;4732:157;;4919:5;;4954:7;;4991:5;;5026:15;;:13;:15;;;:::i;:::-;;;;-1:-1:-1;4692:413:20;;;;;;8817:25:25;;;;-1:-1:-1;;;;;8939:15:25;;;8919:18;;;8912:43;8991:15;;;;8971:18;;;8964:43;9023:18;;;9016:34;9066:19;;;9059:35;9110:19;;;9103:35;;;8789:19;;4692:413:20;;;;;;;;;;;;4657:470;;;;;;4547:598;;;;;;;;9419:66:25;9407:79;;9511:1;9502:11;;9495:27;;;;9547:2;9538:12;;9531:28;9584:2;9575:12;;9149:444;4547:598:20;;;;-1:-1:-1;;4547:598:20;;;;;;;;;4520:639;;4547:598;4520:639;;;;4497:717;;;;;;;;;9825:25:25;9898:4;9886:17;;9866:18;;;9859:45;9920:18;;;9913:34;;;9963:18;;;9956:34;;;9797:19;;4497:717:20;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4497:717:20;;-1:-1:-1;;4497:717:20;;;-1:-1:-1;;;;;;;5233:30:20;;;;;;:59;;;5287:5;-1:-1:-1;;;;;5267:25:20;:16;-1:-1:-1;;;;;5267:25:20;;5233:59;5225:86;;;;-1:-1:-1;;;5225:86:20;;10203:2:25;5225:86:20;;;10185:21:25;10242:2;10222:18;;;10215:30;10281:16;10261:18;;;10254:44;10315:18;;5225:86:20;10001:338:25;5225:86:20;-1:-1:-1;;;;;5322:28:20;;;;;;;:10;:28;;;;;;;;:37;;;;;;;;;;;;;:45;;;5383:31;3057:25:25;;;5322:37:20;;5383:31;;;;;3030:18:25;5383:31:20;;;;;;;4386:1035;4239:1182;;;;;;;:::o;8017:300::-;8063:15;8140:12;;8297:13;;;;:::i;:::-;8287:23;;8080:237;;8017:300;:::o;5611:404::-;5676:7;5753:95;5882:5;5866:23;;;;;;:::i;:::-;;;;;;;;5907:14;5939;:12;:14::i;:::-;5725:273;;;;;;11453:25:25;;;;11494:18;;11487:34;;;;11537:18;;;11530:34;11580:18;;;11573:34;5979:4:20;11623:19:25;;;11616:84;11425:19;;5725:273:20;;;;;;;;;;;;5702:306;;;;;;5695:313;;5611:404;:::o;7038:154::-;7097:7;7129:1;7124;:6;;7116:47;;;;-1:-1:-1;;;7116:47:20;;11913:2:25;7116:47:20;;;11895:21:25;11952:2;11932:18;;;11925:30;11991;11971:18;;;11964:58;12039:18;;7116:47:20;11711:352:25;7116:47:20;7180:5;7184:1;7180;:5;:::i;:::-;7173:12;7038:154;-1:-1:-1;;;7038:154:20:o;6859:173::-;6918:7;;6949:5;6953:1;6949;:5;:::i;:::-;6937:17;;6977:1;6972;:6;;6964:43;;;;-1:-1:-1;;;6964:43:20;;12533:2:25;6964:43:20;;;12515:21:25;12572:2;12552:18;;;12545:30;12611:26;12591:18;;;12584:54;12655:18;;6964:43:20;12331:348:25;7735:276:20;7918:9;;7735:276::o;14:548:25:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:25;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:25:o;1219:184::-;-1:-1:-1;;;1268:1:25;1261:88;1368:4;1365:1;1358:15;1392:4;1389:1;1382:15;1408:719;1451:5;1504:3;1497:4;1489:6;1485:17;1481:27;1471:55;;1522:1;1519;1512:12;1471:55;1558:6;1545:20;1584:18;1621:2;1617;1614:10;1611:36;;;1627:18;;:::i;:::-;1702:2;1696:9;1670:2;1756:13;;-1:-1:-1;;1752:22:25;;;1776:2;1748:31;1744:40;1732:53;;;1800:18;;;1820:22;;;1797:46;1794:72;;;1846:18;;:::i;:::-;1886:10;1882:2;1875:22;1921:2;1913:6;1906:18;1967:3;1960:4;1955:2;1947:6;1943:15;1939:26;1936:35;1933:55;;;1984:1;1981;1974:12;1933:55;2048:2;2041:4;2033:6;2029:17;2022:4;2014:6;2010:17;1997:54;2095:1;2088:4;2083:2;2075:6;2071:15;2067:26;2060:37;2115:6;2106:15;;;;;;1408:719;;;;:::o;2132:156::-;2198:20;;2258:4;2247:16;;2237:27;;2227:55;;2278:1;2275;2268:12;2293:613;2388:6;2396;2404;2457:2;2445:9;2436:7;2432:23;2428:32;2425:52;;;2473:1;2470;2463:12;2425:52;2513:9;2500:23;2542:18;2583:2;2575:6;2572:14;2569:34;;;2599:1;2596;2589:12;2569:34;2622:50;2664:7;2655:6;2644:9;2640:22;2622:50;:::i;:::-;2612:60;;2725:2;2714:9;2710:18;2697:32;2681:48;;2754:2;2744:8;2741:16;2738:36;;;2770:1;2767;2760:12;2738:36;;2793:52;2837:7;2826:8;2815:9;2811:24;2793:52;:::i;:::-;2783:62;;;2864:36;2896:2;2885:9;2881:18;2864:36;:::i;:::-;2854:46;;2293:613;;;;;:::o;3093:328::-;3170:6;3178;3186;3239:2;3227:9;3218:7;3214:23;3210:32;3207:52;;;3255:1;3252;3245:12;3207:52;3278:29;3297:9;3278:29;:::i;:::-;3268:39;;3326:38;3360:2;3349:9;3345:18;3326:38;:::i;:::-;3316:48;;3411:2;3400:9;3396:18;3383:32;3373:42;;3093:328;;;;;:::o;3797:186::-;3856:6;3909:2;3897:9;3888:7;3884:23;3880:32;3877:52;;;3925:1;3922;3915:12;3877:52;3948:29;3967:9;3948:29;:::i;3988:606::-;4099:6;4107;4115;4123;4131;4139;4147;4200:3;4188:9;4179:7;4175:23;4171:33;4168:53;;;4217:1;4214;4207:12;4168:53;4240:29;4259:9;4240:29;:::i;:::-;4230:39;;4288:38;4322:2;4311:9;4307:18;4288:38;:::i;:::-;4278:48;;4373:2;4362:9;4358:18;4345:32;4335:42;;4424:2;4413:9;4409:18;4396:32;4386:42;;4447:37;4479:3;4468:9;4464:19;4447:37;:::i;:::-;4437:47;;4531:3;4520:9;4516:19;4503:33;4493:43;;4583:3;4572:9;4568:19;4555:33;4545:43;;3988:606;;;;;;;;;;:::o;4599:260::-;4667:6;4675;4728:2;4716:9;4707:7;4703:23;4699:32;4696:52;;;4744:1;4741;4734:12;4696:52;4767:29;4786:9;4767:29;:::i;:::-;4757:39;;4815:38;4849:2;4838:9;4834:18;4815:38;:::i;:::-;4805:48;;4599:260;;;;;:::o;4864:437::-;4943:1;4939:12;;;;4986;;;5007:61;;5061:4;5053:6;5049:17;5039:27;;5007:61;5114:2;5106:6;5103:14;5083:18;5080:38;5077:218;;-1:-1:-1;;;5148:1:25;5141:88;5252:4;5249:1;5242:15;5280:4;5277:1;5270:15;5077:218;;4864:437;;;:::o;5780:543::-;5882:2;5877:3;5874:11;5871:446;;;5918:1;5942:5;5939:1;5932:16;5986:4;5983:1;5973:18;6056:2;6044:10;6040:19;6037:1;6033:27;6027:4;6023:38;6092:4;6080:10;6077:20;6074:47;;;-1:-1:-1;6115:4:25;6074:47;6170:2;6165:3;6161:12;6158:1;6154:20;6148:4;6144:31;6134:41;;6225:82;6243:2;6236:5;6233:13;6225:82;;;6288:17;;;6269:1;6258:13;6225:82;;;6229:3;;;5871:446;5780:543;;;:::o;6499:1345::-;6625:3;6619:10;6652:18;6644:6;6641:30;6638:56;;;6674:18;;:::i;:::-;6703:97;6793:6;6753:38;6785:4;6779:11;6753:38;:::i;:::-;6747:4;6703:97;:::i;:::-;6855:4;;6912:2;6901:14;;6929:1;6924:663;;;;7631:1;7648:6;7645:89;;;-1:-1:-1;7700:19:25;;;7694:26;7645:89;-1:-1:-1;;6456:1:25;6452:11;;;6448:24;6444:29;6434:40;6480:1;6476:11;;;6431:57;7747:81;;6894:944;;6924:663;5727:1;5720:14;;;5764:4;5751:18;;-1:-1:-1;;6960:20:25;;;7078:236;7092:7;7089:1;7086:14;7078:236;;;7181:19;;;7175:26;7160:42;;7273:27;;;;7241:1;7229:14;;;;7108:19;;7078:236;;;7082:3;7342:6;7333:7;7330:19;7327:201;;;7403:19;;;7397:26;-1:-1:-1;;7486:1:25;7482:14;;;7498:3;7478:24;7474:37;7470:42;7455:58;7440:74;;7327:201;-1:-1:-1;;;;;7574:1:25;7558:14;;;7554:22;7541:36;;-1:-1:-1;6499:1345:25:o;8201:184::-;-1:-1:-1;;;8250:1:25;8243:88;8350:4;8347:1;8340:15;8374:4;8371:1;8364:15;8390:135;8429:3;8450:17;;;8447:43;;8470:18;;:::i;:::-;-1:-1:-1;8517:1:25;8506:13;;8390:135::o;10344:845::-;10474:3;10503:1;10536:6;10530:13;10566:36;10592:9;10566:36;:::i;:::-;10621:1;10638:17;;;10664:133;;;;10811:1;10806:358;;;;10631:533;;10664:133;-1:-1:-1;;10697:24:25;;10685:37;;10770:14;;10763:22;10751:35;;10742:45;;;-1:-1:-1;10664:133:25;;10806:358;10837:6;10834:1;10827:17;10867:4;10912;10909:1;10899:18;10939:1;10953:165;10967:6;10964:1;10961:13;10953:165;;;11045:14;;11032:11;;;11025:35;11088:16;;;;10982:10;;10953:165;;;10957:3;;;11147:6;11142:3;11138:16;11131:23;;10631:533;-1:-1:-1;11180:3:25;;10344:845;-1:-1:-1;;;;;;10344:845:25:o;12068:128::-;12135:9;;;12156:11;;;12153:37;;;12170:18;;:::i;12201:125::-;12266:9;;;12287:10;;;12284:36;;;12300:18;;:::i","linkReferences":{}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","initialize(string,string,uint8)":"1624f6c6","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set, where `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"initialize(string,string,uint8)\":{\"details\":\"To hide constructor warnings across solc versions due to different constructor visibility requirements and syntaxes, we add an initialization function that can be called only once.\"}},\"stateVariables\":{\"initialized\":{\"details\":\"A bool to track whether the contract has been initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`\"},\"approve(address,uint256)\":{\"notice\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.\"},\"decimals()\":{\"notice\":\"Returns the decimals places of the token.\"},\"name()\":{\"notice\":\"Returns the name of the token.\"},\"symbol()\":{\"notice\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"notice\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"notice\":\"Moves `amount` tokens from the caller's account to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance.\"}},\"notice\":\"This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/forge-std/src/mocks/MockERC20.sol\":\"MockERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/forge-std/src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n/// @dev Interface of the ERC20 standard as defined in the EIP.\\n/// @dev This includes the optional name, symbol, and decimals metadata.\\ninterface IERC20 {\\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\\n    /// is the new allowance.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Returns the amount of tokens in existence.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Returns the amount of tokens owned by `account`.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\\n    /// to spend on behalf of `owner`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n    /// `amount` is then deducted from the caller's allowance.\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the name of the token.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the symbol of the token.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Returns the decimals places of the token.\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\"},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.9.0;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\\ncontract MockERC20 is IERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string internal _name;\\n\\n    string internal _symbol;\\n\\n    uint8 internal _decimals;\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal _totalSupply;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return _balanceOf[owner];\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal INITIAL_CHAIN_ID;\\n\\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               INITIALIZE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev A bool to track whether the contract has been initialized.\\n    bool private initialized;\\n\\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\\n    /// syntaxes, we add an initialization function that can be called only once.\\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\\n        require(!initialized, \\\"ALREADY_INITIALIZED\\\");\\n\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n\\n        INITIAL_CHAIN_ID = _pureChainId();\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n\\n        initialized = true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\\n        _balanceOf[to] = _add(_balanceOf[to], amount);\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\\n\\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\\n        _balanceOf[to] = _add(_balanceOf[to], amount);\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        public\\n        virtual\\n    {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        address recoveredAddress = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            keccak256(\\n                                \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                            ),\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n        _allowance[recoveredAddress][spender] = value;\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(_name)),\\n                keccak256(\\\"1\\\"),\\n                _pureChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        _totalSupply = _add(_totalSupply, amount);\\n        _balanceOf[to] = _add(_balanceOf[to], amount);\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\\n        _totalSupply = _sub(_totalSupply, amount);\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MATH LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERC20: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(a >= b, \\\"ERC20: subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                HELPERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\\n    // Checker changed `chainid` from pure to view in 0.8.0.\\n    function _viewChainId() private view returns (uint256 chainId) {\\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        address(this); // Silence warnings in older Solc versions.\\n    }\\n\\n    function _pureChainId() private pure returns (uint256 chainId) {\\n        function() internal view returns (uint256) fnIn = _viewChainId;\\n        function() internal pure returns (uint256) pureChainId;\\n        assembly {\\n            pureChainId := fnIn\\n        }\\n        chainId = pureChainId();\\n    }\\n}\\n\",\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"spender","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"permit"},{"inputs":[],"stateMutability":"view","type":"function","name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"initialize(string,string,uint8)":{"details":"To hide constructor warnings across solc versions due to different constructor visibility requirements and syntaxes, we add an initialization function that can be called only once."}},"version":1},"userdoc":{"kind":"user","methods":{"allowance(address,address)":{"notice":"Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`"},"approve(address,uint256)":{"notice":"Sets `amount` as the allowance of `spender` over the caller's tokens."},"decimals()":{"notice":"Returns the decimals places of the token."},"name()":{"notice":"Returns the name of the token."},"symbol()":{"notice":"Returns the symbol of the token."},"totalSupply()":{"notice":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"notice":"Moves `amount` tokens from the caller's account to `to`."},"transferFrom(address,address,uint256)":{"notice":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance."}},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":1000},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"lib/forge-std/src/mocks/MockERC20.sol":"MockERC20"},"evmVersion":"istanbul","libraries":{}},"sources":{"lib/forge-std/src/interfaces/IERC20.sol":{"keccak256":"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n","license":"MIT"},"lib/forge-std/src/mocks/MockERC20.sol":{"keccak256":"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract MockERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(\"1\"),\n                _pureChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n","license":"MIT"}},"version":1},"storageLayout":{"storage":[{"astId":24734,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":24736,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":24738,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"_decimals","offset":0,"slot":"2","type":"t_uint8"},{"astId":24767,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"_totalSupply","offset":0,"slot":"3","type":"t_uint256"},{"astId":24771,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"_balanceOf","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"},{"astId":24777,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"_allowance","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":24818,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"INITIAL_CHAIN_ID","offset":0,"slot":"6","type":"t_uint256"},{"astId":24820,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"INITIAL_DOMAIN_SEPARATOR","offset":0,"slot":"7","type":"t_bytes32"},{"astId":24824,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"nonces","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"},{"astId":24827,"contract":"lib/forge-std/src/mocks/MockERC20.sol:MockERC20","label":"initialized","offset":0,"slot":"9","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"version":1,"kind":"user","methods":{"allowance(address,address)":{"notice":"Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`"},"approve(address,uint256)":{"notice":"Sets `amount` as the allowance of `spender` over the caller's tokens."},"decimals()":{"notice":"Returns the decimals places of the token."},"name()":{"notice":"Returns the name of the token."},"symbol()":{"notice":"Returns the symbol of the token."},"totalSupply()":{"notice":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"notice":"Moves `amount` tokens from the caller's account to `to`."},"transferFrom(address,address,uint256)":{"notice":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance."}},"notice":"This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production."},"devdoc":{"version":1,"kind":"dev","details":"Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol","methods":{"approve(address,uint256)":{"details":"Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"initialize(string,string,uint8)":{"details":"To hide constructor warnings across solc versions due to different constructor visibility requirements and syntaxes, we add an initialization function that can be called only once."}},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set, where `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`)."}}},"id":20}