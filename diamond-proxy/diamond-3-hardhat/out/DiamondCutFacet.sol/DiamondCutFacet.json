{"abi":[{"type":"function","name":"diamondCut","inputs":[{"name":"_diamondCut","type":"tuple[]","internalType":"struct IDiamondCut.FacetCut[]","components":[{"name":"facetAddress","type":"address","internalType":"address"},{"name":"action","type":"uint8","internalType":"enum IDiamondCut.FacetCutAction"},{"name":"functionSelectors","type":"bytes4[]","internalType":"bytes4[]"}]},{"name":"_init","type":"address","internalType":"address"},{"name":"_calldata","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"DiamondCut","inputs":[{"name":"_diamondCut","type":"tuple[]","indexed":false,"internalType":"struct IDiamondCut.FacetCut[]","components":[{"name":"facetAddress","type":"address","internalType":"address"},{"name":"action","type":"uint8","internalType":"enum IDiamondCut.FacetCutAction"},{"name":"functionSelectors","type":"bytes4[]","internalType":"bytes4[]"}]},{"name":"_init","type":"address","indexed":false,"internalType":"address"},{"name":"_calldata","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"DiamondCut","inputs":[{"name":"_diamondCut","type":"tuple[]","indexed":false,"internalType":"struct IDiamondCut.FacetCut[]","components":[{"name":"facetAddress","type":"address","internalType":"address"},{"name":"action","type":"uint8","internalType":"enum IDiamondCut.FacetCutAction"},{"name":"functionSelectors","type":"bytes4[]","internalType":"bytes4[]"}]},{"name":"_init","type":"address","indexed":false,"internalType":"address"},{"name":"_calldata","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"error","name":"InitializationFunctionReverted","inputs":[{"name":"_initializationContractAddress","type":"address","internalType":"address"},{"name":"_calldata","type":"bytes","internalType":"bytes"}]}],"bytecode":{"object":"0x6080604052348015600f57600080fd5b5061153d8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610fe3565b610045565b005b61004d61009e565b61009761005a8587611129565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061014792505050565b5050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146101455760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b565b60005b83518110156103195760008482815181106101675761016761126d565b60200260200101516020015190506000600281111561018857610188611283565b81600281111561019a5761019a611283565b036101e8576101e38583815181106101b4576101b461126d565b6020026020010151600001518684815181106101d2576101d261126d565b602002602001015160400151610364565b610310565b60018160028111156101fc576101fc611283565b03610245576101e38583815181106102165761021661126d565b6020026020010151600001518684815181106102345761023461126d565b60200260200101516040015161060e565b600281600281111561025957610259611283565b036102a2576101e38583815181106102735761027361126d565b6020026020010151600001518684815181106102915761029161126d565b6020026020010151604001516108c8565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e00000000000000000000000000000000000000000000000000606482015260840161013c565b5060010161014a565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161034d939291906112e9565b60405180910390a161035f8282610a38565b505050565b60008151116103c95760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161013c565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166104555760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201526b65206164647265737328302960a01b606482015260840161013c565b6001600160a01b0383166000908152600182016020526040812054906bffffffffffffffffffffffff82169003610490576104908285610b17565b60005b83518110156100975760008482815181106104b0576104b061126d565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156105565760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c7265616479206578697374730000000000000000000000606482015260840161013c565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6bffffffffffffffffffffffff8c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836105fd81611401565b945050600190920191506104939050565b60008151116106735760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161013c565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166106ff5760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201526b65206164647265737328302960a01b606482015260840161013c565b6001600160a01b0383166000908152600182016020526040812054906bffffffffffffffffffffffff8216900361073a5761073a8285610b17565b60005b835181101561009757600084828151811061075a5761075a61126d565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036108055760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606482015260840161013c565b610810858284610b81565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6bffffffffffffffffffffffff8c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836108b781611401565b9450506001909201915061073d9050565b600081511161092d5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161013c565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316156109cb5760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d757374206265206164647265737328302900000000000000000000606482015260840161013c565b60005b8251811015610a325760008382815181106109eb576109eb61126d565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316610a28848284610b81565b50506001016109ce565b50505050565b6001600160a01b038216610a4a575050565b610a6c826040518060600160405280602881526020016114bc60289139610f5d565b600080836001600160a01b031683604051610a87919061142c565b600060405180830381855af49150503d8060008114610ac2576040519150601f19603f3d011682016040523d82523d6000602084013e610ac7565b606091505b509150915081610a3257805115610ae15780518082602001fd5b83836040517f192105d700000000000000000000000000000000000000000000000000000000815260040161013c929190611448565b610b39816040518060600160405280602481526020016114e460249139610f5d565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160a01b038216610bfd5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606482015260840161013c565b306001600160a01b03831603610c7b5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e000000000000000000000000000000000000606482015260840161013c565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046bffffffffffffffffffffffff169291610ccf91611472565b9050808214610dc6576001600160a01b03841660009081526001860160205260408120805483908110610d0457610d0461126d565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b925082919085908110610d5557610d5561126d565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6bffffffffffffffffffffffff8516021790555b6001600160a01b03841660009081526001860160205260409020805480610def57610def61148b565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b03198516825286905260408120819055819003610097576002850154600090610e5290600190611472565b6001600160a01b0386166000908152600180890160205260409091200154909150808214610f01576000876002018381548110610e9157610e9161126d565b6000918252602090912001546002890180546001600160a01b039092169250829184908110610ec257610ec261126d565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610f1457610f1461148b565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b8181610a325760405162461bcd60e51b815260040161013c91906114a1565b80356001600160a01b0381168114610f9557600080fd5b919050565b60008083601f840112610fac57600080fd5b50813567ffffffffffffffff811115610fc457600080fd5b602083019150836020828501011115610fdc57600080fd5b9250929050565b600080600080600060608688031215610ffb57600080fd5b853567ffffffffffffffff8082111561101357600080fd5b818801915088601f83011261102757600080fd5b81358181111561103657600080fd5b8960208260051b850101111561104b57600080fd5b6020830197508096505061106160208901610f7e565b9450604088013591508082111561107757600080fd5b5061108488828901610f9a565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156110ce576110ce611095565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156110fd576110fd611095565b604052919050565b600067ffffffffffffffff82111561111f5761111f611095565b5060051b60200190565b600061113c61113784611105565b6110d4565b83815260208082019190600586811b86013681111561115a57600080fd5b865b8181101561126057803567ffffffffffffffff8082111561117d5760008081fd5b818a019150606082360312156111935760008081fd5b61119b6110ab565b6111a483610f7e565b815286830135600381106111b85760008081fd5b81880152604083810135838111156111d05760008081fd5b939093019236601f8501126111e757600092508283fd5b833592506111f761113784611105565b83815292871b840188019288810190368511156112145760008081fd5b948901945b848610156112495785356001600160e01b03198116811461123a5760008081fd5b82529489019490890190611219565b91830191909152508852505094830194830161115c565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b838110156112b457818101518382015260200161129c565b50506000910152565b600081518084526112d5816020860160208601611299565b601f01601f19169290920160200192915050565b60006060808301606084528087518083526080925060808601915060808160051b8701016020808b0160005b848110156113bb57607f198a850301865281518885016001600160a01b038251168652848201516003811061135a57634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156113a65783516001600160e01b031916825292860192600192909201919086019061137c565b50978501979550505090820190600101611315565b50506001600160a01b038a169088015286810360408801526113dd81896112bd565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b60006bffffffffffffffffffffffff808316818103611422576114226113eb565b6001019392505050565b6000825161143e818460208701611299565b9190910192915050565b6001600160a01b038316815260406020820152600061146a60408301846112bd565b949350505050565b81810381811115611485576114856113eb565b92915050565b634e487b7160e01b600052603160045260246000fd5b6020815260006114b460208301846112bd565b939250505056fe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220db93b5019ce976d09546ea3a8a15c90106f680c5a7f730c722812e6f2432beeb64736f6c63430008190033","sourceMap":"630:747:1:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610fe3565b610045565b005b61004d61009e565b61009761005a8587611129565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061014792505050565b5050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146101455760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b565b60005b83518110156103195760008482815181106101675761016761126d565b60200260200101516020015190506000600281111561018857610188611283565b81600281111561019a5761019a611283565b036101e8576101e38583815181106101b4576101b461126d565b6020026020010151600001518684815181106101d2576101d261126d565b602002602001015160400151610364565b610310565b60018160028111156101fc576101fc611283565b03610245576101e38583815181106102165761021661126d565b6020026020010151600001518684815181106102345761023461126d565b60200260200101516040015161060e565b600281600281111561025957610259611283565b036102a2576101e38583815181106102735761027361126d565b6020026020010151600001518684815181106102915761029161126d565b6020026020010151604001516108c8565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e00000000000000000000000000000000000000000000000000606482015260840161013c565b5060010161014a565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161034d939291906112e9565b60405180910390a161035f8282610a38565b505050565b60008151116103c95760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161013c565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166104555760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201526b65206164647265737328302960a01b606482015260840161013c565b6001600160a01b0383166000908152600182016020526040812054906bffffffffffffffffffffffff82169003610490576104908285610b17565b60005b83518110156100975760008482815181106104b0576104b061126d565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156105565760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c7265616479206578697374730000000000000000000000606482015260840161013c565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6bffffffffffffffffffffffff8c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836105fd81611401565b945050600190920191506104939050565b60008151116106735760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161013c565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166106ff5760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201526b65206164647265737328302960a01b606482015260840161013c565b6001600160a01b0383166000908152600182016020526040812054906bffffffffffffffffffffffff8216900361073a5761073a8285610b17565b60005b835181101561009757600084828151811061075a5761075a61126d565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036108055760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e0000000000000000606482015260840161013c565b610810858284610b81565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6bffffffffffffffffffffffff8c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836108b781611401565b9450506001909201915061073d9050565b600081511161092d5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b606482015260840161013c565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316156109cb5760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d757374206265206164647265737328302900000000000000000000606482015260840161013c565b60005b8251811015610a325760008382815181106109eb576109eb61126d565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316610a28848284610b81565b50506001016109ce565b50505050565b6001600160a01b038216610a4a575050565b610a6c826040518060600160405280602881526020016114bc60289139610f5d565b600080836001600160a01b031683604051610a87919061142c565b600060405180830381855af49150503d8060008114610ac2576040519150601f19603f3d011682016040523d82523d6000602084013e610ac7565b606091505b509150915081610a3257805115610ae15780518082602001fd5b83836040517f192105d700000000000000000000000000000000000000000000000000000000815260040161013c929190611448565b610b39816040518060600160405280602481526020016114e460249139610f5d565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160a01b038216610bfd5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e2774206578697374000000000000000000606482015260840161013c565b306001600160a01b03831603610c7b5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e000000000000000000000000000000000000606482015260840161013c565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046bffffffffffffffffffffffff169291610ccf91611472565b9050808214610dc6576001600160a01b03841660009081526001860160205260408120805483908110610d0457610d0461126d565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b925082919085908110610d5557610d5561126d565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6bffffffffffffffffffffffff8516021790555b6001600160a01b03841660009081526001860160205260409020805480610def57610def61148b565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b03198516825286905260408120819055819003610097576002850154600090610e5290600190611472565b6001600160a01b0386166000908152600180890160205260409091200154909150808214610f01576000876002018381548110610e9157610e9161126d565b6000918252602090912001546002890180546001600160a01b039092169250829184908110610ec257610ec261126d565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610f1457610f1461148b565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b8181610a325760405162461bcd60e51b815260040161013c91906114a1565b80356001600160a01b0381168114610f9557600080fd5b919050565b60008083601f840112610fac57600080fd5b50813567ffffffffffffffff811115610fc457600080fd5b602083019150836020828501011115610fdc57600080fd5b9250929050565b600080600080600060608688031215610ffb57600080fd5b853567ffffffffffffffff8082111561101357600080fd5b818801915088601f83011261102757600080fd5b81358181111561103657600080fd5b8960208260051b850101111561104b57600080fd5b6020830197508096505061106160208901610f7e565b9450604088013591508082111561107757600080fd5b5061108488828901610f9a565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156110ce576110ce611095565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156110fd576110fd611095565b604052919050565b600067ffffffffffffffff82111561111f5761111f611095565b5060051b60200190565b600061113c61113784611105565b6110d4565b83815260208082019190600586811b86013681111561115a57600080fd5b865b8181101561126057803567ffffffffffffffff8082111561117d5760008081fd5b818a019150606082360312156111935760008081fd5b61119b6110ab565b6111a483610f7e565b815286830135600381106111b85760008081fd5b81880152604083810135838111156111d05760008081fd5b939093019236601f8501126111e757600092508283fd5b833592506111f761113784611105565b83815292871b840188019288810190368511156112145760008081fd5b948901945b848610156112495785356001600160e01b03198116811461123a5760008081fd5b82529489019490890190611219565b91830191909152508852505094830194830161115c565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b838110156112b457818101518382015260200161129c565b50506000910152565b600081518084526112d5816020860160208601611299565b601f01601f19169290920160200192915050565b60006060808301606084528087518083526080925060808601915060808160051b8701016020808b0160005b848110156113bb57607f198a850301865281518885016001600160a01b038251168652848201516003811061135a57634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156113a65783516001600160e01b031916825292860192600192909201919086019061137c565b50978501979550505090820190600101611315565b50506001600160a01b038a169088015286810360408801526113dd81896112bd565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b60006bffffffffffffffffffffffff808316818103611422576114226113eb565b6001019392505050565b6000825161143e818460208701611299565b9190910192915050565b6001600160a01b038316815260406020820152600061146a60408301846112bd565b949350505050565b81810381811115611485576114856113eb565b92915050565b634e487b7160e01b600052603160045260246000fd5b6020815260006114b460208301846112bd565b939250505056fe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220db93b5019ce976d09546ea3a8a15c90106f680c5a7f730c722812e6f2432beeb64736f6c63430008190033","sourceMap":"630:747:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1119:256;;;;;;:::i;:::-;;:::i;:::-;;;1271:35;:33;:35::i;:::-;1316:52;;1338:11;;1316:52;:::i;:::-;1351:5;1358:9;;1316:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1316:21:1;;-1:-1:-1;;;1316:52:1:i;:::-;1119:256;;;;;:::o;2648:156:10:-;814:45;2728:30;;;-1:-1:-1;;;;;2728:30:10;2714:10;:44;2706:91;;;;-1:-1:-1;;;2706:91:10;;5479:2:12;2706:91:10;;;5461:21:12;5518:2;5498:18;;;5491:30;5557:34;5537:18;;;5530:62;5628:4;5608:18;;;5601:32;5650:19;;2706:91:10;;;;;;;;;2648:156::o;2948:1067::-;3104:18;3099:806;3137:11;:18;3124:10;:31;3099:806;;;3185:33;3221:11;3233:10;3221:23;;;;;;;;:::i;:::-;;;;;;;:30;;;3185:66;;3279:30;3269:40;;;;;;;;:::i;:::-;:6;:40;;;;;;;;:::i;:::-;;3265:630;;3329:93;3342:11;3354:10;3342:23;;;;;;;;:::i;:::-;;;;;;;:36;;;3380:11;3392:10;3380:23;;;;;;;;:::i;:::-;;;;;;;:41;;;3329:12;:93::i;:::-;3265:630;;;3457:34;3447:6;:44;;;;;;;;:::i;:::-;;3443:452;;3511:97;3528:11;3540:10;3528:23;;;;;;;;:::i;:::-;;;;;;;:36;;;3566:11;3578:10;3566:23;;;;;;;;:::i;:::-;;;;;;;:41;;;3511:16;:97::i;3443:452::-;3643:33;3633:6;:43;;;;;;;;:::i;:::-;;3629:266;;3696:96;3712:11;3724:10;3712:23;;;;;;;;:::i;:::-;;;;;;;:36;;;3750:11;3762:10;3750:23;;;;;;;;:::i;:::-;;;;;;;:41;;;3696:15;:96::i;3629:266::-;3831:49;;-1:-1:-1;;;3831:49:10;;6260:2:12;3831:49:10;;;6242:21:12;6299:2;6279:18;;;6272:30;6338:34;6318:18;;;6311:62;6409:9;6389:18;;;6382:37;6436:19;;3831:49:10;6058:403:12;3629:266:10;-1:-1:-1;3157:12:10;;3099:806;;;;3919:41;3930:11;3943:5;3950:9;3919:41;;;;;;;;:::i;:::-;;;;;;;;3970:38;3991:5;3998:9;3970:20;:38::i;:::-;2948:1067;;;:::o;4021:1089::-;4157:1;4129:18;:25;:29;4121:85;;;;-1:-1:-1;;;4121:85:10;;9551:2:12;4121:85:10;;;9533:21:12;9590:2;9570:18;;;9563:30;9629:34;9609:18;;;9602:62;-1:-1:-1;;;9680:18:12;;;9673:41;9731:19;;4121:85:10;9349:407:12;4121:85:10;814:45;-1:-1:-1;;;;;4286:27:10;;4278:84;;;;-1:-1:-1;;;4278:84:10;;9963:2:12;4278:84:10;;;9945:21:12;10002:2;9982:18;;;9975:30;10041:34;10021:18;;;10014:62;-1:-1:-1;;;10092:18:12;;;10085:42;10144:19;;4278:84:10;9761:408:12;4278:84:10;-1:-1:-1;;;;;4405:40:10;;4372:23;4405:40;;;:25;;;:40;;;;;:65;;4539:21;;;;;4535:91;;4576:27;4585:2;4589:13;4576:8;:27::i;:::-;4640:21;4635:469;4679:18;:25;4663:13;:41;4635:469;;;4737:15;4755:18;4774:13;4755:33;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;;4828:39:10;;4802:23;4828:39;;;;;;;;;;;:52;4755:33;;-1:-1:-1;;;;;;4828:52:10;4902:29;;4894:95;;;;-1:-1:-1;;;4894:95:10;;10376:2:12;4894:95:10;;;10358:21:12;10415:2;10395:18;;;10388:30;10454:34;10434:18;;;10427:62;10525:23;10505:18;;;10498:51;10566:19;;4894:95:10;10174:417:12;4894:95:10;-1:-1:-1;;;;;;7469:40:10;;:29;:40;;;;;;;;;;;:85;;-1:-1:-1;;;;;7469:85:10;;;-1:-1:-1;;;7469:85:10;;;;;;;7564:40;;;;;-1:-1:-1;7564:25:10;;;:40;;;;;:74;;;;;;;;;;;;;;;;;;;;;;;;;7469:85;7564:74;;;;;;;;;;;;;;;;;;;;;7648:40;;;;;;;:69;;-1:-1:-1;;;;;;7648:69:10;;;;5075:18;;;;:::i;:::-;;-1:-1:-1;;4706:15:10;;;;;-1:-1:-1;4635:469:10;;-1:-1:-1;4635:469:10;5116:1138;5256:1;5228:18;:25;:29;5220:85;;;;-1:-1:-1;;;5220:85:10;;9551:2:12;5220:85:10;;;9533:21:12;9590:2;9570:18;;;9563:30;9629:34;9609:18;;;9602:62;-1:-1:-1;;;9680:18:12;;;9673:41;9731:19;;5220:85:10;9349:407:12;5220:85:10;814:45;-1:-1:-1;;;;;5377:27:10;;5369:84;;;;-1:-1:-1;;;5369:84:10;;9963:2:12;5369:84:10;;;9945:21:12;10002:2;9982:18;;;9975:30;10041:34;10021:18;;;10014:62;-1:-1:-1;;;10092:18:12;;;10085:42;10144:19;;5369:84:10;9761:408:12;5369:84:10;-1:-1:-1;;;;;5496:40:10;;5463:23;5496:40;;;:25;;;:40;;;;;:65;;5630:21;;;;;5626:79;;5667:27;5676:2;5680:13;5667:8;:27::i;:::-;5719:21;5714:534;5758:18;:25;5742:13;:41;5714:534;;;5816:15;5834:18;5853:13;5834:33;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;;5907:39:10;;5881:23;5907:39;;;;;;;;;;;:52;5834:33;;-1:-1:-1;;;;;;5907:52:10;;;;5981:32;;;;5973:101;;;;-1:-1:-1;;;5973:101:10;;11209:2:12;5973:101:10;;;11191:21:12;11248:2;11228:18;;;11221:30;11287:34;11267:18;;;11260:62;11358:26;11338:18;;;11331:54;11402:19;;5973:101:10;11007:420:12;5973:101:10;6088:45;6103:2;6107:15;6124:8;6088:14;:45::i;:::-;-1:-1:-1;;;;;;7469:40:10;;:29;:40;;;;;;;;;;;:85;;-1:-1:-1;;;;;7469:85:10;;;-1:-1:-1;;;7469:85:10;;;;;;;7564:40;;;;;-1:-1:-1;7564:25:10;;;:40;;;;;:74;;;;;;;;;;;;;;;;;;;;;;;;;7469:85;7564:74;;;;;;;;;;;;;;;;;;;;;7648:40;;;;;;;:69;;-1:-1:-1;;;;;;7648:69:10;;;;6219:18;;;;:::i;:::-;;-1:-1:-1;;5785:15:10;;;;;-1:-1:-1;5714:534:10;;-1:-1:-1;5714:534:10;6260:742;6399:1;6371:18;:25;:29;6363:85;;;;-1:-1:-1;;;6363:85:10;;9551:2:12;6363:85:10;;;9533:21:12;9590:2;9570:18;;;9563:30;9629:34;9609:18;;;9602:62;-1:-1:-1;;;9680:18:12;;;9673:41;9731:19;;6363:85:10;9349:407:12;6363:85:10;814:45;-1:-1:-1;;;;;6585:27:10;;;6577:94;;;;-1:-1:-1;;;6577:94:10;;11634:2:12;6577:94:10;;;11616:21:12;11673:2;11653:18;;;11646:30;11712:34;11692:18;;;11685:62;11783:24;11763:18;;;11756:52;11825:19;;6577:94:10;11432:418:12;6577:94:10;6686:21;6681:315;6725:18;:25;6709:13;:41;6681:315;;;6783:15;6801:18;6820:13;6801:33;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;;6874:39:10;;6848:23;6874:39;;;;;;;;;;;:52;6801:33;;-1:-1:-1;;;;;;6874:52:10;6940:45;6874:2;:52;6801:33;6940:14;:45::i;:::-;-1:-1:-1;;6752:15:10;;6681:315;;;;6353:649;6260:742;;:::o;9926:::-;-1:-1:-1;;;;;10018:19:10;;10014:56;;9926:742;;:::o;10014:56::-;10079:73;10102:5;10079:73;;;;;;;;;;;;;;;;;:22;:73::i;:::-;10171:12;10185:18;10207:5;-1:-1:-1;;;;;10207:18:10;10226:9;10207:29;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10170:66;;;;10251:7;10246:416;;10278:12;;:16;10274:378;;10460:5;10454:12;10510:15;10502:5;10498:2;10494:14;10487:39;10274:378;10620:5;10627:9;10589:48;;;;;;;;;;;;:::i;7008:316::-;7095:77;7118:13;7095:77;;;;;;;;;;;;;;;;;:22;:77::i;:::-;7246:17;;;:24;;-1:-1:-1;;;;;7182:40:10;;;;;;;:25;;;;:40;;;;;;;:61;;:88;;;7280:37;;;;;;;;;;;;;;-1:-1:-1;;;;;;7280:37:10;;;;;;7008:316::o;7730:2190::-;-1:-1:-1;;;;;7857:27:10;;7849:95;;;;-1:-1:-1;;;7849:95:10;;12691:2:12;7849:95:10;;;12673:21:12;12730:2;12710:18;;;12703:30;12769:34;12749:18;;;12742:62;12840:25;12820:18;;;12813:53;12883:19;;7849:95:10;12489:419:12;7849:95:10;8064:4;-1:-1:-1;;;;;8039:30:10;;;8031:89;;;;-1:-1:-1;;;8031:89:10;;13115:2:12;8031:89:10;;;13097:21:12;13154:2;13134:18;;;13127:30;13193:34;13173:18;;;13166:62;13264:16;13244:18;;;13237:44;13298:19;;8031:89:10;12913:410:12;8031:89:10;-1:-1:-1;;;;;;8231:40:10;;8204:24;8231:40;;;;;;;;;;;:65;-1:-1:-1;;;;;8337:40:10;;;;8405:1;8337:25;;;:40;;;;;;:65;-1:-1:-1;;;8231:65:10;;;;;;8204:24;8337:69;;;:::i;:::-;8306:100;;8508:20;8488:16;:40;8484:387;;-1:-1:-1;;;;;8566:40:10;;8544:19;8566:40;;;:25;;;:40;;;;;:80;;8625:20;;8566:80;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;8660:40:10;;;;:25;;;:40;;;;;;;:76;;8566:80;;;;;;;;;;;;;;-1:-1:-1;8566:80:10;;8660:40;8719:16;;8660:76;;;;;;:::i;:::-;;;;;;;;;;;;;:91;;;:76;;;;;;:91;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8765:43:10;;;;;;;;;;;;:95;;-1:-1:-1;;;;;8765:95:10;-1:-1:-1;;;8765:95:10;;;;;;;8484:387;-1:-1:-1;;;;;8916:40:10;;;;;;:25;;;:40;;;;;:64;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;8916:64:10;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8997:40:10;;;;;;;;;;8990:47;;;9132:25;;;9128:786;;9299:17;;;:24;9264:32;;9299:28;;9326:1;;9299:28;:::i;:::-;-1:-1:-1;;;;;9372:40:10;;9341:28;9372:40;;;:25;;;;:40;;;;;;:61;;9264:63;;-1:-1:-1;9451:48:10;;;9447:338;;9519:24;9546:2;:17;;9564:24;9546:43;;;;;;;;:::i;:::-;;;;;;;;;;;9607:17;;;:39;;-1:-1:-1;;;;;9546:43:10;;;;-1:-1:-1;9546:43:10;;9625:20;;9607:39;;;;;;:::i;:::-;;;;;;;;;;;;;:58;;-1:-1:-1;;;;;;9607:58:10;-1:-1:-1;;;;;9607:58:10;;;;;;9683:43;;;;;;-1:-1:-1;9683:25:10;;;:43;;;;;;:64;:87;;;9447:338;9798:2;:17;;:23;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;9798:23:10;;;;;-1:-1:-1;;;;;;9798:23:10;;;;;;;;;-1:-1:-1;;;;;9842:40:10;;;;9798:23;9842:25;;;:40;;;;;;:61;9835:68;-1:-1:-1;;7831:2089:10;;7730:2190;;;:::o;10674:261::-;10847:22;;10914:13;10896:16;10888:40;;;;-1:-1:-1;;;10888:40:10;;;;;;;;:::i;14:196:12:-;82:20;;-1:-1:-1;;;;;131:54:12;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:347::-;266:8;276:6;330:3;323:4;315:6;311:17;307:27;297:55;;348:1;345;338:12;297:55;-1:-1:-1;371:20:12;;414:18;403:30;;400:50;;;446:1;443;436:12;400:50;483:4;475:6;471:17;459:29;;535:3;528:4;519:6;511;507:19;503:30;500:39;497:59;;;552:1;549;542:12;497:59;215:347;;;;;:::o;567:1009::-;709:6;717;725;733;741;794:2;782:9;773:7;769:23;765:32;762:52;;;810:1;807;800:12;762:52;850:9;837:23;879:18;920:2;912:6;909:14;906:34;;;936:1;933;926:12;906:34;974:6;963:9;959:22;949:32;;1019:7;1012:4;1008:2;1004:13;1000:27;990:55;;1041:1;1038;1031:12;990:55;1081:2;1068:16;1107:2;1099:6;1096:14;1093:34;;;1123:1;1120;1113:12;1093:34;1178:7;1171:4;1161:6;1158:1;1154:14;1150:2;1146:23;1142:34;1139:47;1136:67;;;1199:1;1196;1189:12;1136:67;1230:4;1226:2;1222:13;1212:23;;1254:6;1244:16;;;1279:40;1313:4;1302:9;1298:20;1279:40;:::i;:::-;1269:50;;1372:2;1361:9;1357:18;1344:32;1328:48;;1401:2;1391:8;1388:16;1385:36;;;1417:1;1414;1407:12;1385:36;;1456:60;1508:7;1497:8;1486:9;1482:24;1456:60;:::i;:::-;567:1009;;;;-1:-1:-1;567:1009:12;;-1:-1:-1;1535:8:12;;1430:86;567:1009;-1:-1:-1;;;567:1009:12:o;1581:184::-;-1:-1:-1;;;1630:1:12;1623:88;1730:4;1727:1;1720:15;1754:4;1751:1;1744:15;1770:253;1842:2;1836:9;1884:4;1872:17;;1919:18;1904:34;;1940:22;;;1901:62;1898:88;;;1966:18;;:::i;:::-;2002:2;1995:22;1770:253;:::o;2028:275::-;2099:2;2093:9;2164:2;2145:13;;-1:-1:-1;;2141:27:12;2129:40;;2199:18;2184:34;;2220:22;;;2181:62;2178:88;;;2246:18;;:::i;:::-;2282:2;2275:22;2028:275;;-1:-1:-1;2028:275:12:o;2308:191::-;2376:4;2409:18;2401:6;2398:30;2395:56;;;2431:18;;:::i;:::-;-1:-1:-1;2476:1:12;2472:14;2488:4;2468:25;;2308:191::o;2504:2768::-;2672:9;2707:72;2723:55;2771:6;2723:55;:::i;:::-;2707:72;:::i;:::-;2813:19;;;2851:4;2871:12;;;;2801:3;2902:1;2937:14;;;2926:26;;2975:14;2964:26;;2961:46;;;3003:1;3000;2993:12;2961:46;3027:5;3041:2198;3057:6;3052:3;3049:15;3041:2198;;;3143:3;3130:17;3170:18;3220:2;3207:11;3204:19;3201:109;;;3264:1;3293:2;3289;3282:14;3201:109;3344:11;3337:5;3333:23;3323:33;;3401:4;3396:2;3380:14;3376:23;3372:34;3369:124;;;3447:1;3476:2;3472;3465:14;3369:124;3521:22;;:::i;:::-;3572;3591:2;3572:22;:::i;:::-;3563:7;3556:39;3644:2;3640;3636:11;3623:25;3683:1;3674:7;3671:14;3661:112;;3727:1;3756:2;3752;3745:14;3661:112;3793:16;;;3786:33;3842:2;3884:11;;;3871:25;3912:14;;;3909:104;;;3967:1;3996:2;3992;3985:14;3909:104;4037:15;;;;;4095:14;4088:4;4079:14;;4075:35;4065:136;;4153:1;4142:12;;4183:3;4178;4171:16;4065:136;4238:3;4225:17;4214:28;;4268:69;4284:52;4332:3;4284:52;:::i;4268:69::-;4381:18;;;4477:12;;;4468:22;;4464:31;;;4421:14;;;;4524;4511:28;;4508:121;;;4581:1;4611:3;4606;4599:16;4508:121;4655:12;;;;4680:440;4698:8;4691:5;4688:19;4680:440;;;4794:5;4781:19;-1:-1:-1;;;;;;4843:7:12;4839:80;4830:7;4827:93;4817:210;;4971:1;5005:3;5000;4993:16;4817:210;5044:22;;4719:14;;;;5092;;;;4680:440;;;5140:16;;;5133:31;;;;-1:-1:-1;5177:20:12;;-1:-1:-1;;5217:12:12;;;;3074;;3041:2198;;;-1:-1:-1;5261:5:12;;2504:2768;-1:-1:-1;;;;;;;2504:2768:12:o;5680:184::-;-1:-1:-1;;;5729:1:12;5722:88;5829:4;5826:1;5819:15;5853:4;5850:1;5843:15;5869:184;-1:-1:-1;;;5918:1:12;5911:88;6018:4;6015:1;6008:15;6042:4;6039:1;6032:15;6598:250;6683:1;6693:113;6707:6;6704:1;6701:13;6693:113;;;6783:11;;;6777:18;6764:11;;;6757:39;6729:2;6722:10;6693:113;;;-1:-1:-1;;6840:1:12;6822:16;;6815:27;6598:250::o;6853:270::-;6894:3;6932:5;6926:12;6959:6;6954:3;6947:19;6975:76;7044:6;7037:4;7032:3;7028:14;7021:4;7014:5;7010:16;6975:76;:::i;:::-;7105:2;7084:15;-1:-1:-1;;7080:29:12;7071:39;;;;7112:4;7067:50;;6853:270;-1:-1:-1;;6853:270:12:o;7128:2216::-;7394:4;7423:2;7463;7452:9;7448:18;7493:2;7482:9;7475:21;7516:6;7551;7545:13;7582:6;7574;7567:22;7608:3;7598:13;;7642:3;7631:9;7627:19;7620:26;;7705:3;7695:6;7692:1;7688:14;7677:9;7673:30;7669:40;7728:4;7767:2;7759:6;7755:15;7788:1;7798:1375;7812:6;7809:1;7806:13;7798:1375;;;7905:3;7901:8;7889:9;7881:6;7877:22;7873:37;7868:3;7861:50;7940:6;7934:13;7986:2;7978:6;7974:15;-1:-1:-1;;;;;8027:2:12;8021:9;8017:58;8009:6;8002:74;8123:2;8119;8115:11;8109:18;8167:1;8153:12;8150:19;8140:227;;-1:-1:-1;;;8208:1:12;8201:88;8316:4;8313:1;8306:15;8348:4;8345:1;8338:15;8140:227;8387:15;;;8380:37;8440:4;8485:11;;;8479:18;8517:15;;;8510:27;;;8598:21;;8632:24;;;;8722:23;;;;-1:-1:-1;;8678:15:12;;;;8783:282;8799:8;8794:3;8791:17;8783:282;;;8880:15;;-1:-1:-1;;;;;;8876:88:12;8862:103;;9034:17;;;;8827:1;8818:11;;;;;8991:14;;;;8783:282;;;-1:-1:-1;9151:12:12;;;;9088:5;-1:-1:-1;;;9116:15:12;;;;7834:1;7827:9;7798:1375;;;-1:-1:-1;;;;;;;6532:54:12;;9209:18;;;6520:67;9266:22;;;9259:4;9244:20;;9237:52;9306:32;9270:6;9323;9306:32;:::i;:::-;9298:40;7128:2216;-1:-1:-1;;;;;;;;;;7128:2216:12:o;10596:184::-;-1:-1:-1;;;10645:1:12;10638:88;10745:4;10742:1;10735:15;10769:4;10766:1;10759:15;10785:217;10823:3;10851:26;10912:2;10905:5;10901:14;10939:2;10930:7;10927:15;10924:41;;10945:18;;:::i;:::-;10994:1;10981:15;;10785:217;-1:-1:-1;;;10785:217:12:o;11855:287::-;11984:3;12022:6;12016:13;12038:66;12097:6;12092:3;12085:4;12077:6;12073:17;12038:66;:::i;:::-;12120:16;;;;;11855:287;-1:-1:-1;;11855:287:12:o;12147:337::-;-1:-1:-1;;;;;12326:6:12;12322:55;12311:9;12304:74;12414:2;12409;12398:9;12394:18;12387:30;12285:4;12434:44;12474:2;12463:9;12459:18;12451:6;12434:44;:::i;:::-;12426:52;12147:337;-1:-1:-1;;;;12147:337:12:o;13328:128::-;13395:9;;;13416:11;;;13413:37;;;13430:18;;:::i;:::-;13328:128;;;;:::o;13461:184::-;-1:-1:-1;;;13510:1:12;13503:88;13610:4;13607:1;13600:15;13634:4;13631:1;13624:15;13650:219;13799:2;13788:9;13781:21;13762:4;13819:44;13859:2;13848:9;13844:18;13836:6;13819:44;:::i;:::-;13811:52;13650:219;-1:-1:-1;;;13650:219:12:o","linkReferences":{}},"methodIdentifiers":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":"1f931c1c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"contracts/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x862aadba5321ffaf88456deadba8df4ec681e4a93ce3dc44d6c0c0b3b68a8230\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    // 32 bytes keccak hash of a string to use as a diamond storage location.\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        // assigns struct storage slot to the storage position\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xc5044f5a7a031e4e1869a26addf83b25c8b20d5949ba13b613dfbc72ad2f63b0\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_initializationContractAddress","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"type":"error","name":"InitializationFunctionReverted"},{"inputs":[{"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]","components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false},{"internalType":"address","name":"_init","type":"address","indexed":false},{"internalType":"bytes","name":"_calldata","type":"bytes","indexed":false}],"type":"event","name":"DiamondCut","anonymous":false},{"inputs":[{"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]","components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false},{"internalType":"address","name":"_init","type":"address","indexed":false},{"internalType":"bytes","name":"_calldata","type":"bytes","indexed":false}],"type":"event","name":"DiamondCut","anonymous":false},{"inputs":[{"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]","components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}]},{"internalType":"address","name":"_init","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"diamondCut"}],"devdoc":{"kind":"dev","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"params":{"_calldata":"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init","_diamondCut":"Contains the facet addresses and function selectors","_init":"The address of the contract or facet to execute _calldata"}}},"version":1},"userdoc":{"kind":"user","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"notice":"Add/replace/remove any number of functions and optionally execute         a function with delegatecall"}},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":1000},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/facets/DiamondCutFacet.sol":"DiamondCutFacet"},"evmVersion":"istanbul","libraries":{}},"sources":{"contracts/facets/DiamondCutFacet.sol":{"keccak256":"0x862aadba5321ffaf88456deadba8df4ec681e4a93ce3dc44d6c0c0b3b68a8230","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\nimport { LibDiamond } from \"../libraries/LibDiamond.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\ncontract DiamondCutFacet is IDiamondCut {\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\n    }\n}\n","license":"MIT"},"contracts/interfaces/IDiamondCut.sol":{"keccak256":"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n","license":"MIT"},"contracts/libraries/LibDiamond.sol":{"keccak256":"0xc5044f5a7a031e4e1869a26addf83b25c8b20d5949ba13b613dfbc72ad2f63b0","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\n\nlibrary LibDiamond {\n    // 32 bytes keccak hash of a string to use as a diamond storage location.\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        // assigns struct storage slot to the storage position\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            return;\n        }\n        enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");        \n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\n        if (!success) {\n            if (error.length > 0) {\n                // bubble up error\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(error)\n                    revert(add(32, error), returndata_size)\n                }\n            } else {\n                revert InitializationFunctionReverted(_init, _calldata);\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n","license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"notice":"Add/replace/remove any number of functions and optionally execute         a function with delegatecall"}}},"devdoc":{"version":1,"kind":"dev","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"params":{"_calldata":"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init","_diamondCut":"Contains the facet addresses and function selectors","_init":"The address of the contract or facet to execute _calldata"}}}},"id":1}